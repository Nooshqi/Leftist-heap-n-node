/*****************************************
 * Instructions
 *  - Replace 'uwuserid' with your uWaterloo User ID
 *  - Select the current calendar term and enter the year
 *  - List students with whom you had discussions and who helped you
 *
 * uWaterloo User ID:  bkinuthi @uwaterloo.ca
 * Submitted for ECE 250
 * Department of Electrical and Computer Engineering
 * University of Waterloo
 * Calender Term of Submission:  (Winter) 2015
 *
 * By submitting this file, I affirm that
 * I am the author of all modifications to
 * the provided code.
 *
 * The following is a list of uWaterloo User IDs of those students
 * I had discussions with in preparing this project:
 *    -
 *
 * The following is a list of uWaterloo User IDs of those students
 * who helped me with this project (describe their help; e.g., debugging):
 *    -
 *****************************************/

#ifndef LEFTIST_NODE_H
#define LEFTIST_NODE_H

#include <algorithm>
#include <stack>
// You may use std::swap and std::min

#ifndef nullptr
#define nullptr 0
#endif

template <typename Type>
class Leftist_node {
	private:
		Type element;
		Leftist_node *left_tree;
		Leftist_node *right_tree;
		int heap_null_path_length;

	public:
		Leftist_node( Type const & );

		Type retrieve() const;
		bool empty() const;
		Leftist_node *left() const;
		Leftist_node *right() const;
		int count( Type const & ) const;
		int null_path_length() const;

		void push( Leftist_node *, Leftist_node *& );
		void clear();
};

template <typename Type>
Leftist_node<Type>::Leftist_node( Type const &obj ):
element( obj ),
left_tree( nullptr ),
right_tree( nullptr ),
heap_null_path_length( 0 ) {
	// does nothing
}

// You may need this

template <typename Type>
bool Leftist_node<Type>::empty() const {
	return ( this == nullptr );
}

// You must implement everything



template <typename Type>
Type Leftist_node<Type>::retrieve() const {
	//Returns the element stored in this node. (O(1))
	return element;

}

template <typename Type>
Leftist_node<Type> *Leftist_node<Type>::left() const {
	//Returns the address of the left sub-tree. (O(1))
	return left_tree;

}

template <typename Type>
Leftist_node<Type> *Leftist_node<Type>::right() const {
	//Returns the address of the right sub-tree. (O(1))
	return right_tree;

}

template <typename Type>
int Leftist_node<Type>::null_path_length() const {
	//do i need the npl in this ?? or could i go on without it ?
	int npl = heap_null_path_length; 
	if (this == nullptr){
		npl = -1;
	}
	//or should I set return null_path_length??
	return npl;

}

template <typename Type>
int Leftist_node<Type>::count( const Type &obj ) const {
	//Return the number of instances of the argument in this sub-tree. (O(n))
	
	int counter = 0;
	if (this == nullptr ){
		return counter;
	}
	else{
		if(this->retrieve == obj ){
			counter = 1 + left()->count() + right()->count();	
		}
		else(this->retrieve == obj){
			counter = 0 + left()->count() + right()->count();
		}
		
	}

	/***
	

	if (!this.empty() ) {

		std::stack<Leftist_node<Type> *> walkthru;

		walkthru.push(this.root_node);

		while (!walkthru.empty() ){
			Leftist_node<Type> *top_node = walkthru.top();
			walkthru.pop();

			if (top_node->retrieve() == obj){
				counter++;

			}

			if (left() != nullptr){
				walkthru.push(left());

			}

			if (right() != nullptr){
				walkthru.push(right());

			}
		}

		return counter;
	}
	***/


}

template <typename Type>
void Leftist_node<Type>::push(Leftist_node *new_heap, Leftist_node *&ptr_to_this){
	//acts like a merge function as explained on the slides to allow for the pop/push->heap


	/***
		if ( new_heap == nullptr ) {
		return;
		}

		else if ( this == nullptr ) {
			ptr_to_this = new_heap;
			return;
		}

		// If the this contains a larger element, we will swap the
		// two heaps and instead merge this heap with the argument.

		if(element <= new_heap->retrieve()){
			right_tree->push(new_heap, right_tree)
			
			//heap_null_path_length = std::min( 1 + left()->null_path_length(), 1 + right()->null_path_length() );
			
		}
		else {
		Leftist_node *older = ptr_to_this;
		ptr_to_this = new_heap;
		new_heap->push(ptr_to_this, older)
		
		//new_heap->right()->push(ptr_to_this,new_heap->right())
		
		if ( left()->null_path_length() < right()->null_path_length() ) {
			//would using an std swap or would it take longer time ?
			std::swap(ptr_to_this->right_tree,ptr_to_this->left_tree)
			//Leftist_node<Type> *tmp = left;
			//left = right;
			//right = tmp;
		}
		heap_null_path_length = std::min( 1 + left()->null_path_length(), 1 + right()->null_path_length() );
		
	}
		
		

		
	***/


}

template <typename Type>
void Leftist_node<Type>::clear(){
	//If this is nullptr, return; otherwise,
	// call clear on the left sub-tree and then on the right and then delete this. (O(n))


	/***
	if ( left() != 0 ) {
			left()->clear();
		}

	if ( right() != 0 ) {
		right()->clear();
	}

	delete this;

	***/
}


#endif